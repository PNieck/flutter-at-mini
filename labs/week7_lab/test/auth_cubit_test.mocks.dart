// Mocks generated by Mockito 5.0.16 from annotations
// in week7_lab/test/auth_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:week7_lab/data/auth_service.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i2.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isSignedIn =>
      (super.noSuchMethod(Invocation.getter(#isSignedIn), returnValue: false)
          as bool);
  @override
  _i3.Stream<bool> get isSignedInStream =>
      (super.noSuchMethod(Invocation.getter(#isSignedInStream),
          returnValue: Stream<bool>.empty()) as _i3.Stream<bool>);
  @override
  _i3.Future<_i2.SignInResult> signInWithEmail(
          String? email, String? password) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithEmail, [email, password]),
              returnValue:
                  Future<_i2.SignInResult>.value(_i2.SignInResult.invalidEmail))
          as _i3.Future<_i2.SignInResult>);
  @override
  _i3.Future<bool> signUpWithEmail(String? email, String? password) => (super
      .noSuchMethod(Invocation.method(#signUpWithEmail, [email, password]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  String toString() => super.toString();
}
